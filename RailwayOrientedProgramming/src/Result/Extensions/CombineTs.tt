<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="CommonFunction.t4" #>
// Generated code
namespace FunctionalDDD;

public static partial class ResultExtensions
{

<#
  void WriteT1Values(int n) {
     Write(String.Join(", ", Enumerable.Range(1, n).Select(i => $"t1.Ok.Item{i}")));
  }
  
  void WriteIsFailure(int n) {
    Write(String.Join(" || ", Enumerable.Range(1, n).Select(i => $"t{i}.IsFailure")));
  }

  void WriteResultT(int n) {
     Write(String.Join(", ", Enumerable.Range(1, n).Select(i => $"Result<T{i}, Err> t{i}")));
  }

  void WriteAddFailure(int n) {
    WriteLine("if (t1.IsFailure) errors.AddRange(t1.Errs);");
    for(var i=2; i <= n; i++)
        WriteLine($"            if (t{i}.IsFailure) errors.AddRange(t{i}.Errs);");
  }

  void WriteTValues(int n) {
     Write(String.Join(", ", Enumerable.Range(1, n).Select(i => $"t{i}.Ok")));
  }

  for(var i = 3; i <=9; i++) { 
#>
    public static Result<(<# WriteTs(i); #>), Err> Combine<<# WriteTs(i); #>>(this Result<(<# WriteTs(i - 1); #>), Err> t1, Result<<# Write("T" + i); #>, Err> tc)
    {
        if (t1.IsFailure || tc.IsFailure)
        {
            var errors = new Errs<Err>();
            if (t1.IsFailure)
                errors.AddRange(t1.Errs);
            if (tc.IsFailure)
                errors.AddRange(tc.Errs);
            return Result.Failure<(<# WriteTs(i); #>)>(errors);
        }

        return Result.Success<(<# WriteTs(i); #>), Err>((<# WriteT1Values(i - 1); #>, tc.Ok));
    }

    public static Result<(<# WriteTs(i); #>), Err> Combine<<# WriteTs(i); #>>(this <# WriteResultT(i); #>)
    {
        if (<# WriteIsFailure(i); #>)
        {
            var errors = new Errs<Err>();
            <# WriteAddFailure(i); #>
            return Result.Failure<(<# WriteTs(i); #>)>(errors);
        }

        return Result.Success((<# WriteTValues(i); #>));
    }

<#
 }
#>

}