<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="CommonFunction.t4" #>

// Generated code
namespace FunctionalDdd;

public static partial class BindExtensions
{

<#
  void WriteArgs(int n) {
     Write(String.Join(", ", Enumerable.Range(1, n).Select(i => "args" + i)));
  }

  for(var i = 2; i <=9; i++) { 
#>
    /// <summary>
    ///     Selects result from the return value of a given function. If the calling Result is a failure, a new failure result is returned instead.
    /// </summary>
    public static Result<TResult> Bind<<# WriteTs(i); #>, TResult>(
        this Result<(<# WriteTs(i); #>)> result,
        Func<<# WriteTs(i); #>, Result<TResult>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return func(<# WriteArgs(i); #>);
    }

<#
 }
#>
}

public static partial class BindExtensionsAsync
{
    // sync input, Async output.
    public static async Task<Result<TResult>> BindAsync<T1, T2, TResult>(
        this Result<(T1, T2)> result,
        Func<T1, T2, Task<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (args1, args2) = result.Value;
        return await func(args1, args2);
    }

    public static async ValueTask<Result<TResult>> BindAsync<T1, T2, TResult>(
        this Result<(T1, T2)> result,
        Func<T1, T2, ValueTask<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (args1, args2) = result.Value;
        return await func(args1, args2);
    }

<# 
  for(var i = 3; i <= 9; i++) { 
#>

    public static async Task<Result<TResult>> BindAsync<<# WriteTs(i); #>, TResult>(
        this Result<(<# WriteTs(i); #>)> result,
        Func<<# WriteTs(i); #>, Task<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return await func(<# WriteArgs(i); #>);
    }

    public static async ValueTask<Result<TResult>> BindAsync<<# WriteTs(i); #>, TResult>(
        this Result<(<# WriteTs(i); #>)> result,
        Func<<# WriteTs(i); #>, ValueTask<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return await func(<# WriteArgs(i); #>);
    }

<#
 }
#>

    // async tuple input, sync output.
    public static async Task<Result<TResult>> BindAsync<T1, T2, TResult>(
        this Task<Result<(T1, T2)>> resultTask,
        Func<T1, T2, Result<TResult>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (args1, args2) = result.Value;
        return func(args1, args2);
    }

    // async tuple input, sync output.
    public static async ValueTask<Result<TResult>> BindAsync<T1, T2, TResult>(
        this ValueTask<Result<(T1, T2)>> resultTask,
        Func<T1, T2, Result<TResult>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (args1, args2) = result.Value;
        return func(args1, args2);
    }
<# 
  for(var i = 3; i <= 9; i++) { 
#>

    public static async Task<Result<TResult>> BindAsync<<# WriteTs(i); #>, TResult>(
        this Task<Result<(<# WriteTs(i); #>)>> resultTask,
        Func<<# WriteTs(i); #>, Result<TResult>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return func(<# WriteArgs(i); #>);
    }

    public static async ValueTask<Result<TResult>> BindAsync<<# WriteTs(i); #>, TResult>(
        this ValueTask<Result<(<# WriteTs(i); #>)>> resultTask,
        Func<<# WriteTs(i); #>, Result<TResult>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return func(<# WriteArgs(i); #>);
    }
<#
 }
#>

    // async tuple input, async output.
    public static async Task<Result<TResult>> BindAsync<T1, T2, TResult>(
        this Task<Result<(T1, T2)>> resultTask,
        Func<T1, T2, Task<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (args1, args2) = result.Value;
        return await func(args1, args2);
    }

    public static async ValueTask<Result<TResult>> BindAsync<T1, T2, TResult>(
        this ValueTask<Result<(T1, T2)>> resultTask,
        Func<T1, T2, ValueTask<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (args1, args2) = result.Value;
        return await func(args1, args2);
    }
<# 
  for(var i = 3; i <= 9; i++) { 
#>

    public static async Task<Result<TResult>> BindAsync<<# WriteTs(i); #>, TResult>(
        this Task<Result<(<# WriteTs(i); #>)>> resultTask,
        Func<<# WriteTs(i); #>, Task<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return await func(<# WriteArgs(i); #>);
    }

    public static async ValueTask<Result<TResult>> BindAsync<<# WriteTs(i); #>, TResult>(
        this ValueTask<Result<(<# WriteTs(i); #>)>> resultTask,
        Func<<# WriteTs(i); #>, ValueTask<Result<TResult>>> func)
    {
        using var activity = RopTrace.ActivitySource.StartActivity();
        var result = await resultTask;
        if (result.IsFailure)
            return Result.Failure<TResult>(result.Error);

        var (<# WriteArgs(i); #>) = result.Value;
        return await func(<# WriteArgs(i); #>);
    }
<#
 }
#>
}
