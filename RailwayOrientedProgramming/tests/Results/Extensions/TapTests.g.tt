<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

namespace RailwayOrientedProgramming.Tests.Results.Extensions;

public partial class TapTests : TestBase
{
<#
    void WriteNums(int n) {
        Write(String.Join(", ", Enumerable.Range(1, n).Select(i => 40 + i)));
    }

    void WriteParamNums(int n) {
        Write(String.Join(", ", Enumerable.Range(1, n).Select(i => "num" + i)));
    }

    void WriteStrNums(int n) {
        Write(String.Join(" ", Enumerable.Range(1, n).Select(i => "{num" + i + "}")));
    }

    void WriteAssertNums(int n) {
        Write(String.Join(" ", Enumerable.Range(1, n).Select(i => 40 + i)));
    }

    void WriteInts(int n) {
        Write(String.Join(", ", Enumerable.Range(1, n).Select(i => "int")));
    }

	for (var i = 1; i < 9; i++)
	{
#>
    // Tap

    [Fact]
    public void Tap_With<#=i+1#>Parameters_ShouldReturnResult()
    {
        // Arrange
        var result = Result.Success(("Hello", <#WriteNums(i);#>));
        var functionCalled = false;
        var resultValue = string.Empty;

        // Act
        var actual = result.Tap((str, <#WriteParamNums(i);#>) =>
        { 
            functionCalled = true;
            resultValue = $"{str} <#WriteStrNums(i);#>";
        });

        // Assert
        functionCalled.Should().BeTrue();
        actual.IsSuccess.Should().BeTrue();
        actual.Value.Should().Be(("Hello", <#WriteNums(i);#>));
        resultValue.Should().Be("Hello <#WriteAssertNums(i);#>");
    }

    [Fact]
    public void Tap_With<#=i+1#>Parameters_ShouldReturnFailedResult()
    {
        // Arrange
        var result = Result.Failure<(string, <#WriteInts(i);#>)>(Error1);
        var functionCalled = false;

        // Act
        var actual = result.Tap((str, <#WriteParamNums(i);#>) =>
        { 
            functionCalled = true;
        });

        // Assert
        functionCalled.Should().BeFalse();
        actual.IsFailure.Should().BeTrue();
        actual.Error.Should().Be(Error1);
    }

<#
    }
#>
}