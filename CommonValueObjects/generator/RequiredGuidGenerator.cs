namespace SourceGenerator
{
    using System.Collections.Generic;
    using System.Collections.Immutable;
    using System.Threading;
    using FunctionalDDD.CommonValueObjectGenerator;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    [Generator(LanguageNames.CSharp)]
    public class RequiredGuidGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            //#if DEBUG
            //            if (!Debugger.IsAttached)
            //            {
            //                Debugger.Launch();
            //            }
            //#endif
            IncrementalValuesProvider<ClassDeclarationSyntax> requiredGuids = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: static (n, _) => IsSyntaxTargetForGeneration(n),
                    transform: static (ctx, _) => GetSemanticTargetForGeneration(ctx));

            //// Combine the selected enums with the `Compilation`
            IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax>)> compilationAndEnums
                = context.CompilationProvider.Combine(requiredGuids.Collect());

            //// Generate the source using the compilation and enums
            context.RegisterSourceOutput(compilationAndEnums,
                static (spc, source) => Execute(source.Item1, source.Item2, spc));
        }

        private static void Execute(Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classes, SourceProductionContext context)
        {
            if (classes.IsDefaultOrEmpty)
            {
                // nothing to do yet
                return;
            }

            // I'm not sure if this is actually necessary, but `[LoggerMessage]` does it, so seems like a good idea!
            IEnumerable<ClassDeclarationSyntax> distinctClasses = classes.Distinct();

            List<RequiredToGenerate> classesToGenerate = GetTypesToGenerate(compilation, distinctClasses, context.CancellationToken);

            foreach (var g in classesToGenerate)
            {
                // Build up the source code
                var source = $@"// <auto-generated/>
namespace {g.NameSpace}
{{
    using FunctionalDDD.CommonValueObjects;
    public partial class {g.ClassName} : RequiredString<{g.ClassName}>
    {{
        private {g.ClassName}(string value) : base(value)
        {{
        }}
    }}
}}
";


                context.AddSource($"{g.ClassName}.g.cs", source);
            }
        }

        private static List<RequiredToGenerate> GetTypesToGenerate(Compilation compilation, IEnumerable<ClassDeclarationSyntax> classes, CancellationToken cancellationToken)
        {
            var requiredGuidStr = "FunctionalDDD.CommonValueObjects.RequiredGuid`1";
            var classToGenerate = new List<RequiredToGenerate>();
            INamedTypeSymbol? enumAttribute = compilation.GetTypeByMetadataName(requiredGuidStr);
            if (enumAttribute == null)
            {
                // nothing to do if this type isn't available
                return classToGenerate;
            }

            foreach (var classDeclarationSyntax in classes)
            {
                // stop if we're asked to
                cancellationToken.ThrowIfCancellationRequested();

                SemanticModel semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);
                if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                {
                    // something went wrong
                    continue;
                }

                string className = classSymbol.Name;
                string @namespace = classSymbol.ContainingNamespace.ToString();
                string @base = classSymbol.BaseType?.Name ?? "unknown";
                classToGenerate.Add(new RequiredToGenerate(@namespace, className, @base));
            }

            return classToGenerate;
        }

        static ClassDeclarationSyntax GetSemanticTargetForGeneration(GeneratorSyntaxContext context)
        {
            // we know the node is a ClassDeclarationSyntax thanks to IsSyntaxTargetForGeneration
            return (ClassDeclarationSyntax)context.Node;
        }

        private static bool IsSyntaxTargetForGeneration(SyntaxNode node)
        {
            if (node is ClassDeclarationSyntax c && c.BaseList != null)
            {
                var baseType = c.BaseList.Types.FirstOrDefault();
                var nameOfFirstBaseType = baseType?.Type.ToString();

                if (nameOfFirstBaseType == "RequiredString<" + c.Identifier.ValueText + ">")
                    return true;
            }

            return false;
        }
    }
}
